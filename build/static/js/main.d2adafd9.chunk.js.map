{"version":3,"sources":["store/types.ts","store/actions.ts","components/AddDeploymentCard.tsx","util/server-urls.ts","util/helper.ts","components/AllDepoymentCard.tsx","components/Navbar.tsx","pages/homepage.tsx","App.tsx","reportWebVitals.ts","store/reduer.ts","store/index.ts","index.tsx"],"names":["ALL_DEPLOYMENTS","DELETE_DEPLOYMENT","ADD_DEPLOYMENT","setAllDeploymentsAction","deploymentState","payload","type","deleteDeploymentAction","id","AddDeploymentCard","useState","name","versions","url","deploymentDate","deploymentInfos","setDeploymentInfos","reset","show","msg","error","setError","dispatch","useDispatch","createNewDeployment","a","problems","push","length","axios","post","res","data","result","new_dep","join","className","message","closable","onClose","value","onChange","ev","target","placeholder","split","Date","onClick","danger","formatDate","date","toDateString","Column","Table","AllDeployment","deployments","useSelector","state","isError","isLoading","deleteDeployment","notification","loading","pagination","dataSource","title","dataIndex","render","map","tag","Math","random","Navbar","Homepage","fetchAllDeployments","get","useEffect","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","init_state","deploymentReducer","action","filter","dep","_id","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2adafd9.chunk.js","sourcesContent":["export let ALL_DEPLOYMENTS = \"ALL_DEPLOYMENTS\";\nexport let DELETE_DEPLOYMENT = \"DELETE_DEPLOYMENT\";\nexport let ADD_DEPLOYMENT = \"ADD_DEPLOYMENT\";\n","import { Deployment, DeploymentState } from \"../util/interface\";\nimport { ADD_DEPLOYMENT, ALL_DEPLOYMENTS, DELETE_DEPLOYMENT } from \"./types\";\n\nexport let setAllDeploymentsAction = (deploymentState: DeploymentState) => {\n  return {\n    payload: deploymentState,\n    type: ALL_DEPLOYMENTS,\n  };\n};\n\nexport let addDeploymentAction = (deployment: Deployment) => {\n  return {\n    payload: deployment,\n    type: ADD_DEPLOYMENT,\n  };\n};\n\nexport let deleteDeploymentAction = (id: string) => {\n  return {\n    payload: id,\n    type: DELETE_DEPLOYMENT,\n  };\n};\n","import React, { useState } from \"react\";\nimport { Card, Input, Col, Row, Button, Alert } from \"antd\";\nimport axios from \"axios\";\nimport { CREATE_NEW_DEPLOYMENT } from \"../util/server-urls\";\nimport { useDispatch } from \"react-redux\";\nimport { addDeploymentAction } from \"../store/actions\";\nimport { Deployment } from \"../util/interface\";\n\ninterface AddDeploymentCardProps {}\n\ninterface DeploymentInfos {\n  name: string;\n  versions: Array<string>;\n  url: string;\n  deploymentDate: Date | null;\n}\n\nconst AddDeploymentCard: React.SFC<AddDeploymentCardProps> = () => {\n  let [deploymentInfos, setDeploymentInfos] = useState<DeploymentInfos>({\n    name: \"\",\n    versions: [],\n    url: \"\",\n    deploymentDate: null,\n  });\n\n  let reset = () => {\n    setDeploymentInfos({\n      name: \"\",\n      versions: [],\n      url: \"\",\n      deploymentDate: null,\n    });\n  };\n\n  let [error, setError] = useState({\n    show: false,\n    msg: \"\",\n  });\n\n  let dispatch = useDispatch();\n\n  let createNewDeployment = async () => {\n    let problems = [];\n\n    if (deploymentInfos.name === \"\") {\n      problems.push(\"Name should not be empty\");\n    }\n    if (deploymentInfos.url === \"\") {\n      problems.push(\"Url should not be empty\");\n    }\n    if (deploymentInfos.versions.length === 0) {\n      problems.push(\"Add atleast one version\");\n    }\n\n    if (problems.length === 0) {\n      try {\n        let res = await axios.post(CREATE_NEW_DEPLOYMENT, deploymentInfos);\n        if (res.data.result) {\n          let new_dep: Deployment = res.data.data;\n          dispatch(addDeploymentAction(new_dep));\n          reset();\n        } else {\n          setError({\n            show: true,\n            msg: res.data.msg,\n          });\n        }\n      } catch (err) {\n        setError({\n          show: true,\n          msg: \"There was some network issue\",\n        });\n      }\n    } else {\n      setError({\n        show: true,\n        msg: problems.join(\" || \"),\n      });\n    }\n  };\n\n  return (\n    <div className={\"mt-6\"}>\n      <Card>\n        <div className=\"text-xl mb-3\">Add a new deployment</div>\n        {error.show && (\n          <Alert\n            message={error.msg}\n            closable\n            onClose={() =>\n              setError({\n                show: false,\n                msg: \"\",\n              })\n            }\n            type={\"error\"}\n          />\n        )}\n        <div className=\"w-full\">\n          <Row>\n            <Col className={\"m-2\"}>\n              <div className=\"text-xs\">Name</div>\n              <Input\n                value={deploymentInfos.name}\n                onChange={(ev) => {\n                  setDeploymentInfos({\n                    ...deploymentInfos,\n                    name: ev.target.value,\n                  });\n                }}\n                placeholder={\"Name\"}\n              />\n            </Col>\n            <Col className={\"m-2\"}>\n              <div className={\"text-xs\"}>\n                Version (use comma to seprate versions){\" \"}\n              </div>\n              <Input\n                value={deploymentInfos.versions.join(\",\")}\n                onChange={(ev) => {\n                  setDeploymentInfos({\n                    ...deploymentInfos,\n                    versions: ev.target.value.split(\",\"),\n                  });\n                }}\n                type={\"version\"}\n                placeholder={\"Version\"}\n              />\n            </Col>\n            <Col className={\"m-2\"}>\n              <div className=\"text-xs\">Deployment date</div>\n              <Input\n                onChange={(ev) => {\n                  setDeploymentInfos({\n                    ...deploymentInfos,\n                    deploymentDate: new Date(ev.target.value),\n                  });\n                }}\n                type={\"date\"}\n                placeholder={\"Deployment date\"}\n              />\n            </Col>\n            <Col className={\"m-2\"}>\n              <div className=\"text-xs\">Url</div>\n              <Input\n                value={deploymentInfos.url}\n                onChange={(ev) => {\n                  setDeploymentInfos({\n                    ...deploymentInfos,\n                    url: ev.target.value,\n                  });\n                }}\n                type={\"url\"}\n                placeholder={\"Url\"}\n              />\n            </Col>\n          </Row>\n          <div className=\"m-3 space-x-3\">\n            <Button onClick={() => createNewDeployment()} type={\"primary\"}>\n              Add Deployment\n            </Button>\n            <Button onClick={() => reset()} danger>\n              Clear\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\nexport default AddDeploymentCard;\n","export const IS_PROD = process.env.NODE_ENV === \"production\";\nexport const BASE_URL = IS_PROD ? \"\" : \"http://localhost:8080/api/v1\";\nexport const FETCH_ALL_DEPLOYMENTS = BASE_URL + \"/deployment/all\";\nexport const CREATE_NEW_DEPLOYMENT = BASE_URL + \"/deployment/create\";\nexport const DELETE_DEPLOYMENT_URL = BASE_URL + \"/deployment/delete\";\n","export let formatDate = (date: Date) => {\n  return `${date.toDateString()}`;\n};\n","import React from \"react\";\nimport { Button, Card, notification, Table, Tag } from \"antd\";\nimport { formatDate } from \"../util/helper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DeploymentReducer } from \"../util/interface\";\nimport axios from \"axios\";\nimport { DELETE_DEPLOYMENT_URL } from \"../util/server-urls\";\nimport { deleteDeploymentAction } from \"../store/actions\";\n\ninterface AllDeploymentProps {}\n\nlet { Column } = Table;\n\nconst AllDeployment: React.SFC<AllDeploymentProps> = () => {\n  let deployments = useSelector(\n    (state: DeploymentReducer) => state.deployments\n  );\n\n  let dispatch = useDispatch();\n\n  if (deployments.isError) {\n    return <h1>There was some error</h1>;\n  }\n\n  if (deployments.isLoading) {\n    return <h1>Loading ..</h1>;\n  }\n\n  let deleteDeployment = async (id: string) => {\n    try {\n      let res = await axios.post(DELETE_DEPLOYMENT_URL, {\n        id,\n      });\n      if (res.data.result) {\n        dispatch(deleteDeploymentAction(id));\n      } else {\n        notification.error({\n          message: \"There was some issue during deleting the deployment.\",\n        });\n      }\n    } catch (err) {\n      notification.error({\n        message: \"There was some issue during deleting the deployment.\",\n      });\n    }\n  };\n\n  return (\n    <Card className={\"mt-6 overflow-x-auto\"}>\n      <div className=\"text-xl mb-3\">All deployments</div>\n      <Table\n        loading={deployments.isLoading}\n        pagination={false}\n        dataSource={deployments.data}\n      >\n        <Column title={\"Name\"} key=\"name\" dataIndex={\"name\"} />\n        <Column title={\"Url\"} key=\"url\" dataIndex={\"url\"} />\n        <Column\n          title={\"Date\"}\n          key=\"deployedAt\"\n          dataIndex={\"deployedAt\"}\n          render={(date) => <div>{formatDate(new Date(date))}</div>}\n        />\n        <Column\n          title={\"Versions\"}\n          key=\"versions\"\n          dataIndex={\"versions\"}\n          render={(data) => {\n            return (\n              <div>\n                {data.map((tag: string) => (\n                  <Tag key={Math.random()}>{tag}</Tag>\n                ))}\n              </div>\n            );\n          }}\n        />\n        <Column\n          title={\"Actions\"}\n          dataIndex={\"_id\"}\n          render={(id) => {\n            return (\n              <div>\n                <Button\n                  onClick={() => deleteDeployment(id)}\n                  type={\"primary\"}\n                  danger\n                >\n                  Delete\n                </Button>\n              </div>\n            );\n          }}\n        />\n      </Table>\n    </Card>\n  );\n};\nexport default AllDeployment;\n","import React from \"react\";\nimport {} from \"antd\";\n\ninterface NavbarProps {}\n\nconst Navbar: React.SFC<NavbarProps> = () => {\n  return (\n    <div className={\"w-full p-6 text-2xl border-b-2 border-gray-100 bg-white\"}>\n      Deployment App\n    </div>\n  );\n};\nexport default Navbar;\n","import axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport AddDeploymentCard from \"../components/AddDeploymentCard\";\nimport AllDeployment from \"../components/AllDepoymentCard\";\nimport Navbar from \"../components/Navbar\";\nimport { setAllDeploymentsAction } from \"../store/actions\";\nimport { FETCH_ALL_DEPLOYMENTS } from \"../util/server-urls\";\n\ninterface HomepageProps {}\n\nconst Homepage: React.SFC<HomepageProps> = () => {\n  let dispatch = useDispatch();\n\n  let fetchAllDeployments = async () => {\n    try {\n      let deployments = await axios.get(FETCH_ALL_DEPLOYMENTS);\n      if (deployments.data.result) {\n        dispatch(\n          setAllDeploymentsAction({\n            isLoading: false,\n            isError: false,\n            data: deployments.data.data,\n          })\n        );\n      } else {\n        setAllDeploymentsAction({\n          isLoading: false,\n          isError: true,\n          data: [],\n        });\n      }\n    } catch (err) {\n      setAllDeploymentsAction({\n        isLoading: false,\n        isError: true,\n        data: [],\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchAllDeployments();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className={\"min-h-screen bg-gray-50\"}>\n      <Navbar />\n      <div className=\"mx-3 md:mx-24\">\n        <AddDeploymentCard />\n        <AllDeployment />\n      </div>\n    </div>\n  );\n};\nexport default Homepage;\n","import React from \"react\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport Homepage from \"./pages/homepage\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path={\"/\"} exact component={Homepage} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Action, DeploymentReducer } from \"../util/interface\";\nimport { ADD_DEPLOYMENT, ALL_DEPLOYMENTS, DELETE_DEPLOYMENT } from \"./types\";\n\nexport const init_state: DeploymentReducer = {\n  deployments: {\n    isError: false,\n    isLoading: false,\n    data: [],\n  },\n};\n\nexport let deploymentReducer = (\n  state = init_state,\n  action: Action\n): DeploymentReducer => {\n  switch (action.type) {\n    case ALL_DEPLOYMENTS:\n      return {\n        ...state,\n        deployments: action.payload,\n      };\n    case ADD_DEPLOYMENT:\n      return {\n        ...state,\n        deployments: {\n          ...state.deployments,\n          data: [...state.deployments.data, action.payload],\n        },\n      };\n    case DELETE_DEPLOYMENT:\n      return {\n        ...state,\n        deployments: {\n          ...state.deployments,\n          data: state.deployments.data.filter(\n            (dep) => dep._id !== action.payload\n          ),\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default deploymentReducer;\n","import { createStore } from \"redux\";\nimport deploymentReducer from \"./reduer\";\n\nlet store = createStore(deploymentReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}